{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_useState","useState","_useState2","Object","slicedToArray","data","setData","_useState3","_useState4","total","setTotal","useEffect","axios","get","then","res","console","log","columns","Header","accessor","Cell","row","react_default","a","createElement","style","textAlign","value","Intl","DateTimeFormat","format","Date","className","width","es","defaultPageSize","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"yQA8FeA,MAvFf,WAAe,IAAAC,EAEYC,mBAAS,IAFrBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAENK,EAFMH,EAAA,GAECI,EAFDJ,EAAA,GAAAK,EAGcN,mBAAS,IAHvBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAGNE,EAHMD,EAAA,GAGEE,EAHFF,EAAA,GAKbG,oBAAU,WACRC,IAAMC,IAAN,qCACCC,KAAK,SAAAC,GACJT,EAAQS,EAAIV,QAGdO,IAAMC,IAAN,mDACCC,KAAK,SAAAC,GACJC,QAAQC,IAAIF,EAAIV,MAChBK,EAASK,EAAIV,SAEf,IAEF,IAAMa,EAAU,CACd,CACEC,OAAO,WACPC,SAAU,WACVC,KAAM,SAAAC,GAAG,OAAIC,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,UAAW,WAAaL,EAAIM,SAEzD,CACET,OAAO,eACPC,SAAU,cACVC,KAAM,SAAAC,GAAG,OAAIC,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,UAAW,WAAaL,EAAIM,SAEzD,CACET,OAAQ,QACRC,SAAU,YACVC,KAAM,SAAAC,GAAG,OAAIC,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,UAAW,WAAa,IAAIE,KAAKC,eAAe,SAASC,OAAO,IAAIC,KAAKV,EAAIM,WAE1G,CACET,OAAO,gBACPC,SAAU,eACVC,KAAM,SAAAC,GAAG,OAAIC,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,UAAW,WAAaL,EAAIM,UAe3D,OACEL,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,YAAYP,MAAO,CAACQ,MAAO,QAC1CX,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,OACfV,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,UACbV,EAAAC,EAAAC,cAAA,+CAGFF,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,OACfV,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,SACfV,EAAAC,EAAAC,cAACU,EAAA,EAAD,CACI9B,KAAMA,EACNa,QAASA,EACTkB,gBAAiB,MAKnBb,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,OACjBV,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,UACbV,EAAAC,EAAAC,cAAA,yCAGFF,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,OACfV,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,SACfV,EAAAC,EAAAC,cAACU,EAAA,EAAD,CACI9B,KAAMI,EACNS,QArCkB,CACtB,CACEC,OAAO,WACPC,SAAU,YAEZ,CACED,OAAO,SACPC,SAAU,UA+BRgB,gBAAiB,QC1ELC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACPpB,EAAAC,EAAAC,cAACF,EAAAC,EAAMoB,WAAP,KACErB,EAAAC,EAAAC,cAACoB,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,KAAK,SAAAqC,GACJA,EAAaC,eAEdC,MAAM,SAAAC,GACLtC,QAAQsC,MAAMA,EAAMC","file":"static/js/main.ae2f05e4.chunk.js","sourcesContent":["import React,{ useState, useEffect } from 'react';\nimport './App.css';\nimport ReactTable from \"react-table\";\nimport \"react-table/react-table.css\";  \n\nimport axios from 'axios';\n\nfunction App() {\n\n  const [data , setData] = useState([]);\n  const [total , setTotal] = useState([]);\n\n  useEffect(() => { \n    axios.get(`http://localhost:8080/api/rewards`)\n    .then(res => {\n      setData(res.data);\n    });\n\n    axios.get(`http://localhost:8080/api/rewards/total-rewards`)\n    .then(res => {\n      console.log(res.data);\n      setTotal(res.data);\n    });\n  },[]);\n\n  const columns = [\n    {\n      Header:'Customer',\n      accessor: 'custname',\n      Cell: row => <div style={{ textAlign: \"center\" }}>{row.value}</div>\n    },    \n    {\n      Header:'Total Amount',\n      accessor: 'amountspent',\n      Cell: row => <div style={{ textAlign: \"center\" }}>{row.value}</div>\n    },\n    {\n      Header: \"Month\",\n      accessor: 'transdate',\n      Cell: row => <div style={{ textAlign: \"center\" }}>{new Intl.DateTimeFormat('en-US').format(new Date(row.value))}</div>\n    },\n    {\n      Header:'Reward Points',\n      accessor: 'rewardPoints',\n      Cell: row => <div style={{ textAlign: \"center\" }}>{row.value}</div>\n    }\n  ];\n\n  const totalsByColumns = [\n    {\n      Header:'Customer',\n      accessor: 'custname'      \n    },    \n    {\n      Header:'Points',\n      accessor: 'total'\n    }\n  ];\n\n  return (\n    <div className=\"container\" style={{width: '50%'}}> \n    <div className=\"row\">\n    <div className=\"col-10\">\n      <h2>Customer Rewards By Transaction</h2>\n    </div>\n  </div>\n    <div className=\"row\">\n    <div className=\"col-8\">          \n    <ReactTable  \n        data={data}  \n        columns={columns} \n        defaultPageSize={5}\n      />  \n      </div>\n      </div>\n\n      <div className=\"row\">\n    <div className=\"col-10\">\n      <h2>Total Rewards By Customer</h2>\n    </div>\n  </div>\n    <div className=\"row\">\n    <div className=\"col-8\">          \n    <ReactTable  \n        data={total}  \n        columns={totalsByColumns} \n        defaultPageSize={3}\n      />  \n      </div>\n      </div>\n      </div>        \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}